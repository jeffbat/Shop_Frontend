{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register/', {\n      'name': name,\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/ebat/dev/ecommerce/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,kBADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAKIC,WALJ,EAOIC,qBAPJ,EAQIC,qBARJ,EASIC,kBATJ,QAUO,4BAVP;AAaA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC1D,MAAG;AACCA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAIA,UAAMY,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAC;AACJ,wBAAgB;AADZ;AADG,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CACjB,mBADiB,EAEjB;AAAC,kBAAYP,KAAb;AAAoB,kBAAYC;AAAhC,KAFiB,EAGjBG,MAHiB,CAArB;AAMAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACV,kBADA;AAELe,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AAEC,GAxBL,CAwBM,OAAMO,KAAN,EAAY;AACVX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,eADD;AAELc,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MAAtC,GACNF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MADd,GAENF,KAAK,CAACG;AAJH,KAAD,CAAR;AAMH;AACJ,CAjCE;AAoCH,OAAO,MAAMC,MAAM,GAAG,MAAOf,QAAD,IAAc;AACtCO,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAhB,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAER;AAAP,GAAD,CAAR;AACH,CAHM;AAMP,OAAO,MAAMwB,QAAQ,GAAG,CAACC,IAAD,EAAOpB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACnE,MAAG;AACCA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP;AADD,KAAD,CAAR;AAIA,UAAMQ,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAC;AACJ,wBAAgB;AADZ;AADG,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CACjB,sBADiB,EAEjB;AAAC,cAAQa,IAAT;AAAe,kBAAYpB,KAA3B;AAAkC,kBAAYC;AAA9C,KAFiB,EAGjBG,MAHiB,CAArB;AAMAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACN,qBADA;AAELW,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AAEC,GAxBL,CAwBM,OAAMO,KAAN,EAAY;AACVX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,kBADD;AAELU,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MAAtC,GACNF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MADd,GAENF,KAAK,CAACG;AAJH,KAAD,CAAR;AAMH;AACJ,CAjCE","sourcesContent":["import axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n} from '../constants/userConstants'\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/login/',\n            {'username': email, 'password': password },\n            config\n            )\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n        } catch(error){\n            dispatch({\n                type: USER_LOGIN_FAIL,\n                payload:error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n            })\n        }\n    }\n\n\n    export const logout = () => (dispatch) => {\n        localStorage.removeItem('userInfo')\n        dispatch({type: USER_LOGOUT})\n    }\n\n\n    export const register = (name, email, password) => async (dispatch) => {\n        try{\n            dispatch({\n                type: USER_REGISTER_REQUEST\n            })\n\n            const config = {\n                headers:{\n                    'Content-type': 'application/json'\n                }\n            }\n\n            const {data} = await axios.post(\n                '/api/users/register/',\n                {'name': name, 'username': email, 'password': password },\n                config\n                )\n\n            dispatch({\n                type:USER_REGISTER_SUCCESS,\n                payload:data\n            })\n\n            localStorage.setItem('userInfo', JSON.stringify(data))\n\n            } catch(error){\n                dispatch({\n                    type: USER_REGISTER_FAIL,\n                    payload:error.response && error.response.data.detail\n                    ? error.response.data.detail\n                    : error.message,\n                })\n            }\n        }\n"]},"metadata":{},"sourceType":"module"}